from __future__ import absolute_import, print_function, unicode_literals

from collections import Counter
from streamparse.bolt import Bolt
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
class WordCounter(Bolt):

    def initialize(self, conf, ctx):
        self.counts = Counter()
        conn = psycopg2.connect(database="postgres", user="postgres", password="pass", host="localhost", port="5432")
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cur=conn.cursor()
        cur.execute("select * from pg_database where datname = 'TCount'")
        answer = cur.fetchall()
        if len(answer) > 0:
                print ("Database already exists");
        else:
                cur.execute('''CREATE DATABASE "TCount";''')
		print("Database created!")	


        cur.execute("select * from information_schema.tables where table_name='Tweetwordcount' ")
        tab_exist = cur.fetchall()
        if(len(tab_exist)>0):
		print("Database already exists")
	else:
		cur.execute('''CREATE TABLE "Tweetwordcount" (Word TEXT PRIMARY KEY     NOT NULL, Count INT     NOT NULL);''')
        conn.commit()
        cur.close();
        conn.close;
#       self.redis = StrictRedis()

    def process(self, tup):
        word = tup.values[0]

        # Write codes to increment the word count in Postgres
        # Use psycopg to interact with Postgres
        # Database name: Tcount
        # Table name: Tweetwordcount
        # you need to create both the database and the table in advance.
	conn = psycopg2.connect(database='TCount',user="postgres", password="pass", host="localhost", port="5432")
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cur=conn.cursor()


        # Increment the local count
        self.counts[word] += 1
        self.emit([word, self.counts[word]])
	
	cur.execute("Select Count from TCount where Word = '" + word + "';");
	wordcount= cur.fetchone()
        #cur.execute("UPDATE Tweetwordcount SET Word = word,Count=count  WHERE Word = word; IF found THEN RETURN; END IF; BEGIN INSERT INTO Tweetwordcount(Word,Count) VALUES (word, count); RETURN; EXCEPTION WHEN unique_violation THEN")

        # Log the count - just to see the topology running
        self.log('%s: %d' % (word, wordcounts))
